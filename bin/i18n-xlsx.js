#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const Program = require('commander')
const chalk = require('chalk')
const Log = console.log
const { exec, execSync } = require('child_process')

Program
  .version(require('../package.json').version)
  .usage('[options] [value ...]')
  .option('-p, --path [value]', 'Root path of the relative project.')
  .option('-b, --branch [value]', 'Branches who needs to collect i18ns.')
  .option('-i, --ignore-branch [value]', 'Branches who doesn\'t not need to collect i18ns.')
  .option('-c, --current-branch', 'Only needs current branch i18ns.')
  .option('-a, --all-branch', 'Need all branch i18ns.')
  .parse(process.argv)

let pwd = process.cwd()
if (!Program.path) {
  ;(function () {
    while (pwd.split(path.sep).filter(p => p).length !== 1) {
      if (fs.readdirSync(pwd).includes('package.json')) {
        return
      }
      pwd = path.resolve(pwd, '..')
    }
    Log(chalk.red('Error: Not a node repository (or any of the parent directories): package.json'))
    process.exit(1)
  })()
}

let rootPath = Program.path || pwd
let includeBranch = (Program.branch || '').split(',').filter(b => b)
let ignoreBranch = (Program.ignoreBranch || '').split(',')
let isCurrentBranch = !Program.allBranch || Program.currentBranch

// Get i18ns only from current branch
if (isCurrentBranch) {
  require(path.join(__dirname, '../index.js'))(rootPath)
// Get i18ns from different branches
} else {
  process.chdir(rootPath)
  let branchesStr = execSync('git branch -l').toString()
  let branches = branchesStr.split(/\n/).map(s => s.replace('*', '').trim()).filter(s => s)
  let currentBranch = branchesStr.match(/\*\s(.*)/m)[1]
  let statusStr = execSync('git status').toString()
  let shouldStash = !statusStr.includes('nothing to commit')
  if (shouldStash) {
    execSync('git add . & git stash')
  }
  Log(chalk.blue('Current branch', currentBranch))

  let failCount = 0
  let startTime = Date.now()
  for (let br of branches) {
    if (ignoreBranch.includes(br) ||
      (includeBranch.length && !includeBranch.includes(br))
    ) {
      continue
    }
    Log(chalk.blue('Next branch', br))

    // Checkout different branches
    let coSucc = false
    while (!coSucc) {
      try {
        execSync(`git checkout ${br}`)
        coSucc = true
      } catch (e) {
        // Sometimes occurs 'Permission denied' in windows
        execSync('git reset --hard & git clean -df')
      }
    }

    // Collect all i18ns from different branches into one excel
    let mainSucc = false
    while (!mainSucc) {
      try {
        require(path.join(__dirname, '../index.js'))(rootPath)
        mainSucc = true
      } catch (e) {
        Log(chalk.red('Fail times: EPERM: ', ++failCount))
      }
    }

    // Clean all .js and .xlsx generated by vue-i18n-xlsx
    let rsSucc = false
    while (!rsSucc) {
      try {
        execSync('git reset --hard & git clean -df')
        rsSucc = true
      } catch (e) {
        // noop
      }
    }
  }

  // Checkout original branch
  let currSucc = false
  while (!currSucc) {
    try {
      execSync(`git checkout ${currentBranch}`)
      if (shouldStash) {
        execSync(`git stash apply`)
      }
      currSucc = true
    } catch (e) {
      execSync(`git reset --hard & git clean -df`)
    }
  }
  process.chdir(__dirname)
  Log(chalk.green(
    chalk.bgGreen.black(' ALL DONE '),
    `Generate js & excel from different branches successfully in ${(Date.now() - startTime) / 1000}s`
  ))
}

